name: Scheduled Update Check

on:
  schedule:
    # Run weekly on Monday at 2 AM UTC
    - cron: '0 2 * * 1'
  workflow_dispatch:
    inputs:
      force_build:
        description: 'Force rebuild even if no updates'
        required: false
        default: false
        type: boolean

jobs:
  check-updates:
    runs-on: ubuntu-latest
    outputs:
      needs_update: ${{ steps.check.outputs.needs_update }}
      wordpress_version: ${{ steps.check.outputs.wordpress_version }}
      php_version: ${{ steps.check.outputs.php_version }}
    steps:
      - uses: actions/checkout@v4

      - name: Check for updates
        id: check
        run: |
          # Get latest WordPress version by pulling the image and checking version.php
          docker pull wordpress:latest >/dev/null 2>&1
          LATEST_WP_VERSION=$(docker run --rm wordpress:latest cat /usr/src/wordpress/wp-includes/version.php | grep '$wp_version =' | cut -d"'" -f2)

          # Get current WordPress version from Dockerfile
          CURRENT_WP_VERSION=$(grep "FROM wordpress:" Dockerfile | cut -d':' -f2)

          # Get PHP version from latest tag
          LATEST_PHP_INFO=$(curl -s https://hub.docker.com/v2/repositories/library/wordpress/tags/?page_size=50 | \
            jq -r ".results[] | select(.name == \"$LATEST_WP_VERSION\") | .images[0].architecture" | head -1)

          # Default PHP version
          PHP_VERSION="8.3"

          echo "Current WordPress version in Dockerfile: $CURRENT_WP_VERSION"
          echo "Latest WordPress version available: $LATEST_WP_VERSION"
          echo "PHP version: $PHP_VERSION"

          # Check if update is needed
          NEEDS_UPDATE=false
          if [[ "$CURRENT_WP_VERSION" != "$LATEST_WP_VERSION" ]]; then
            echo "WordPress version mismatch - update needed"
            NEEDS_UPDATE=true
          fi

          # Force build if requested
          if [[ "${{ github.event.inputs.force_build }}" == "true" ]]; then
            echo "Force build requested"
            NEEDS_UPDATE=true
          fi

          echo "needs_update=$NEEDS_UPDATE" >> $GITHUB_OUTPUT
          echo "wordpress_version=$LATEST_WP_VERSION" >> $GITHUB_OUTPUT
          echo "php_version=$PHP_VERSION" >> $GITHUB_OUTPUT

  update-and-build:
    needs: check-updates
    if: needs.check-updates.outputs.needs_update == 'true'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          token: ${{ secrets.GH_PAT }}

      - name: Update Dockerfile with new WordPress version
        run: |
          WP_VERSION="${{ needs.check-updates.outputs.wordpress_version }}"
          echo "Updating Dockerfile to WordPress $WP_VERSION"
          sed -i "s/FROM wordpress:.*/FROM wordpress:$WP_VERSION/" Dockerfile

          # Check if there are changes
          if git diff --quiet Dockerfile; then
            echo "No changes to Dockerfile"
          else
            echo "Dockerfile updated"
            git config user.name "github-actions[bot]"
            git config user.email "github-actions[bot]@users.noreply.github.com"
            git add Dockerfile
            git commit -m "Update WordPress to version $WP_VERSION"
            git push
          fi

      - name: Create release tag
        run: |
          # Generate version based on date
          DATE=$(date +%Y%m%d)
          PHP_VERSION="${{ needs.check-updates.outputs.php_version }}"
          TAG="v${PHP_VERSION}-${DATE}"

          # Check if tag already exists
          if git ls-remote --tags origin | grep -q "refs/tags/$TAG"; then
            echo "Tag $TAG already exists, adding timestamp"
            TIMESTAMP=$(date +%H%M%S)
            TAG="v${PHP_VERSION}-${DATE}-${TIMESTAMP}"
          fi

          git tag $TAG
          git push origin $TAG

          echo "Created release tag: $TAG"
          echo "This will trigger the release workflow to build multi-arch images"