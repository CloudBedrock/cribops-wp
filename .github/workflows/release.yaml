name: Release Docker

on:
  push:
    tags:
      - 'v*'  # or 'v*.*.*' if you only want semver-style tags
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to release (if not triggered by a tag push)'
        required: false
        default: ''

jobs:
  # -----------------------------------------------------------------------------
  # 1) Extract the version from the pushed tag or workflow input, and output it
  # -----------------------------------------------------------------------------
  extract-version:
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.getver.outputs.version }}
    steps:
      - name: Get version from tag or input
        id: getver
        run: |
          echo "Event name: $GITHUB_EVENT_NAME"
          echo "GITHUB_REF: $GITHUB_REF"

          # If a version input is provided, use that.
          if [ -n "${{ github.event.inputs.version }}" ]; then
            RAW_VERSION="${{ github.event.inputs.version }}"
            echo "Using input version: $RAW_VERSION"
          else
            # For a tag push, GITHUB_REF must start with "refs/tags/"
            if [[ "$GITHUB_REF" != refs/tags/* ]]; then
              echo "This run is not triggered by a tag push and no version input was provided. Exiting..."
              exit 1
            fi

            # Remove "refs/tags/" prefix and an optional leading "v"
            RAW_VERSION="${GITHUB_REF#refs/tags/}"
            if [[ "$RAW_VERSION" =~ ^v ]]; then
              RAW_VERSION="${RAW_VERSION:1}"
            fi
            echo "Extracted version: $RAW_VERSION"
          fi

          if [ -z "$RAW_VERSION" ]; then
            echo "VERSION is empty after extraction, exiting..."
            exit 1
          fi

          echo "Final version is: $RAW_VERSION"
          echo "version=$RAW_VERSION" >> $GITHUB_OUTPUT

  # -----------------------------------------------------------------------------
  # 2) Test the image before pushing
  # -----------------------------------------------------------------------------
  test:
    runs-on: ubuntu-latest
    needs: extract-version
    steps:
      - uses: actions/checkout@v4

      - uses: docker/setup-buildx-action@v3

      - name: Build test image
        run: |
          echo "Building test image..."
          docker buildx build \
            --pull \
            --platform linux/amd64 \
            --load \
            -t cribops-wp:test \
            -f Dockerfile .

      - name: Start test environment
        run: |
          echo "Starting WordPress test stack..."
          docker compose -f compose.test.yml up -d

      - name: Run tests
        run: |
          echo "Running integration tests..."
          chmod +x tests/test.sh
          ./tests/test.sh

      - name: Show logs on failure
        if: failure()
        run: |
          echo "=== WordPress logs ==="
          docker compose -f compose.test.yml logs wordpress
          echo "=== Redis logs ==="
          docker compose -f compose.test.yml logs redis
          echo "=== Database logs ==="
          docker compose -f compose.test.yml logs db

      - name: Cleanup test environment
        if: always()
        run: docker compose -f compose.test.yml down -v

  # -----------------------------------------------------------------------------
  # 3) Build and push AMD64 image (only if tests pass)
  # -----------------------------------------------------------------------------
  build-amd64:
    runs-on: ubuntu-latest
    needs: [extract-version, test]
    steps:
      - uses: actions/checkout@v4

      - name: Login to GHCR
        run: echo "${{ secrets.GH_PAT }}" | docker login ghcr.io -u "${{ github.repository_owner }}" --password-stdin

      - name: Login to Docker Hub
        run: echo "${{ secrets.DOCKER_PAT }}" | docker login docker.io -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin

      - uses: docker/setup-buildx-action@v3

      - name: Build & push AMD64 image
        run: |
          VERSION="${{ needs.extract-version.outputs.version }}"
          echo "Building AMD64 image with version = $VERSION"
          docker buildx build \
            --pull \
            --platform linux/amd64 \
            --push \
            -t ghcr.io/cloudbedrock/cribops-wp:${VERSION}-amd64 \
            -t ghcr.io/cloudbedrock/cribops-wp:latest-amd64 \
            -t docker.io/cloudbedrock/cribops-wp:${VERSION}-amd64 \
            -t docker.io/cloudbedrock/cribops-wp:latest-amd64 \
            -f Dockerfile .

  # -----------------------------------------------------------------------------
  # 4) Build and push ARM64 image (only if tests pass)
  # -----------------------------------------------------------------------------
  build-arm64:
    runs-on: [self-hosted, macOS, ARM64]
    needs: [extract-version, test]
    timeout-minutes: 60  # Overall job timeout
    steps:
      - uses: actions/checkout@v4

      - name: Login to Docker Hub
        run: echo "${{ secrets.DOCKER_PAT }}" | docker login docker.io -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin

      - name: Login to GHCR
        run: echo "${{ secrets.GH_PAT }}" | docker login ghcr.io -u "${{ github.repository_owner }}" --password-stdin

      - uses: docker/setup-buildx-action@v3

      - name: Build ARM64 image
        timeout-minutes: 30
        run: |
          VERSION="${{ needs.extract-version.outputs.version }}"
          echo "Building ARM64 image with version = $VERSION"
          docker buildx build \
            --pull \
            --platform linux/arm64 \
            --output type=docker \
            -t ghcr.io/cloudbedrock/cribops-wp:${VERSION}-arm64 \
            -t ghcr.io/cloudbedrock/cribops-wp:latest-arm64 \
            -t docker.io/cloudbedrock/cribops-wp:${VERSION}-arm64 \
            -t docker.io/cloudbedrock/cribops-wp:latest-arm64 \
            -f Dockerfile .

      - name: Push to registries with retry
        timeout-minutes: 30
        run: |
          VERSION="${{ needs.extract-version.outputs.version }}"

          # Function to push with retries
          push_with_retry() {
            local image=$1
            local max_attempts=3
            local attempt=1

            while [ $attempt -le $max_attempts ]; do
              echo "Pushing $image (attempt $attempt/$max_attempts)..."
              if docker push "$image"; then
                echo "Successfully pushed $image"
                return 0
              else
                echo "Failed to push $image (attempt $attempt/$max_attempts)"
                if [ $attempt -lt $max_attempts ]; then
                  echo "Waiting 30 seconds before retry..."
                  sleep 30
                fi
                attempt=$((attempt + 1))
              fi
            done

            echo "Failed to push $image after $max_attempts attempts"
            return 1
          }

          # Push images with retry logic
          push_with_retry "ghcr.io/cloudbedrock/cribops-wp:${VERSION}-arm64"
          push_with_retry "ghcr.io/cloudbedrock/cribops-wp:latest-arm64"
          push_with_retry "docker.io/cloudbedrock/cribops-wp:${VERSION}-arm64"
          push_with_retry "docker.io/cloudbedrock/cribops-wp:latest-arm64"

  # -----------------------------------------------------------------------------
  # 5) Create multi-arch manifest for the specific version and for :latest on both registries
  # -----------------------------------------------------------------------------
  manifest:
    runs-on: ubuntu-latest
    needs: [extract-version, build-amd64, build-arm64]
    steps:
    - name: Login to GHCR
      uses: docker/login-action@v2
      with:
        registry: ghcr.io
        username: ${{ github.repository_owner }}
        password: ${{ secrets.GH_PAT }}

    - name: Login to Docker Hub
      uses: docker/login-action@v2
      with:
        registry: docker.io
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PAT }}

    - name: Validate VERSION
      run: |
        VERSION="${{ needs.extract-version.outputs.version }}"
        if [[ -z "$VERSION" ]]; then
          echo "VERSION is empty or not set. Exiting..."
          exit 1
        fi
        echo "Using version $VERSION"

    - name: Create & push multi-arch manifest for GHCR
      run: |
        VERSION="${{ needs.extract-version.outputs.version }}"
        echo "Creating multi-arch images for GHCR with version $VERSION"
        docker buildx imagetools create \
          -t ghcr.io/cloudbedrock/cribops-wp:${VERSION} \
          ghcr.io/cloudbedrock/cribops-wp:${VERSION}-amd64 \
          ghcr.io/cloudbedrock/cribops-wp:${VERSION}-arm64
        docker buildx imagetools create \
          -t ghcr.io/cloudbedrock/cribops-wp:latest \
          ghcr.io/cloudbedrock/cribops-wp:latest-amd64 \
          ghcr.io/cloudbedrock/cribops-wp:latest-arm64

    - name: Create & push multi-arch manifest for Docker Hub
      run: |
        VERSION="${{ needs.extract-version.outputs.version }}"
        echo "Creating multi-arch images for Docker Hub with version $VERSION"
        docker buildx imagetools create \
          -t docker.io/cloudbedrock/cribops-wp:${VERSION} \
          docker.io/cloudbedrock/cribops-wp:${VERSION}-amd64 \
          docker.io/cloudbedrock/cribops-wp:${VERSION}-arm64
        docker buildx imagetools create \
          -t docker.io/cloudbedrock/cribops-wp:latest \
          docker.io/cloudbedrock/cribops-wp:latest-amd64 \
          docker.io/cloudbedrock/cribops-wp:latest-arm64

    - name: Completion message
      run: |
        VERSION="${{ needs.extract-version.outputs.version }}"
        echo "Multi-arch manifests created for version ${VERSION} and :latest on both registries!"
